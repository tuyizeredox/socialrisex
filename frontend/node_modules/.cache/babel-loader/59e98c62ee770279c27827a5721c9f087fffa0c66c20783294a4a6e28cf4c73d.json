{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response3, _error$response3$data, _error$response4, _error$response5;\n  const originalRequest = error.config;\n\n  // Handle 401 errors (unauthorized)\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    var _error$response2;\n    // Clear token and redirect to login\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n    return Promise.reject(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n  }\n\n  // Handle network errors with retry logic\n  if (!error.response && !originalRequest._retry) {\n    originalRequest._retry = true;\n    // Wait 1 second and retry once for network errors\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return api(originalRequest);\n  }\n\n  // Provide better error messages for API failures\n  const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message || 'Network error occurred. Please check your connection.';\n  return Promise.reject({\n    ...((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data),\n    message: errorMessage,\n    status: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status\n  });\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response3","_error$response3$data","_error$response4","_error$response5","originalRequest","status","_error$response2","removeItem","window","location","href","data","_retry","resolve","setTimeout","errorMessage","message"],"sources":["C:/Users/Lenovo/socialrisex-main/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, (error) => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    \n    // Handle 401 errors (unauthorized)\n    if (error.response?.status === 401) {\n      // Clear token and redirect to login\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n      return Promise.reject(error.response?.data || error);\n    }\n    \n    // Handle network errors with retry logic\n    if (!error.response && !originalRequest._retry) {\n      originalRequest._retry = true;\n      // Wait 1 second and retry once for network errors\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return api(originalRequest);\n    }\n    \n    // Provide better error messages for API failures\n    const errorMessage = error.response?.data?.message || \n                        error.message || \n                        'Network error occurred. Please check your connection.';\n    \n    return Promise.reject({\n      ...error.response?.data,\n      message: errorMessage,\n      status: error.response?.status\n    });\n  }\n);\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,MAAM;EAChDC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EAAGK,KAAK,IAAK;EACZ,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAf,GAAG,CAACO,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,gBAAA;EACf,MAAMC,eAAe,GAAGT,KAAK,CAACL,MAAM;;EAEpC;EACA,IAAI,EAAAS,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBM,MAAM,MAAK,GAAG,EAAE;IAAA,IAAAC,gBAAA;IAClC;IACAd,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IAC/B,OAAOd,OAAO,CAACC,MAAM,CAAC,EAAAS,gBAAA,GAAAX,KAAK,CAACG,QAAQ,cAAAQ,gBAAA,uBAAdA,gBAAA,CAAgBK,IAAI,KAAIhB,KAAK,CAAC;EACtD;;EAEA;EACA,IAAI,CAACA,KAAK,CAACG,QAAQ,IAAI,CAACM,eAAe,CAACQ,MAAM,EAAE;IAC9CR,eAAe,CAACQ,MAAM,GAAG,IAAI;IAC7B;IACA,MAAM,IAAIhB,OAAO,CAACiB,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IACvD,OAAOjC,GAAG,CAACwB,eAAe,CAAC;EAC7B;;EAEA;EACA,MAAMW,YAAY,GAAG,EAAAf,gBAAA,GAAAL,KAAK,CAACG,QAAQ,cAAAE,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBW,IAAI,cAAAV,qBAAA,uBAApBA,qBAAA,CAAsBe,OAAO,KAC9BrB,KAAK,CAACqB,OAAO,IACb,uDAAuD;EAE3E,OAAOpB,OAAO,CAACC,MAAM,CAAC;IACpB,KAAAK,gBAAA,GAAGP,KAAK,CAACG,QAAQ,cAAAI,gBAAA,uBAAdA,gBAAA,CAAgBS,IAAI;IACvBK,OAAO,EAAED,YAAY;IACrBV,MAAM,GAAAF,gBAAA,GAAER,KAAK,CAACG,QAAQ,cAAAK,gBAAA,uBAAdA,gBAAA,CAAgBE;EAC1B,CAAC,CAAC;AACJ,CACF,CAAC;AAED,eAAezB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}