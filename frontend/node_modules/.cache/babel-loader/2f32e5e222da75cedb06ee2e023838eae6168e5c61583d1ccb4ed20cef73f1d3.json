{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tuyizere dieudonne\\\\SOCIALRISE X1\\\\SOCIALRISE X\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext, useEffect } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport api from '../utils/api';\nimport { useNotification } from './NotificationContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const notification = useNotification();\n  const showNotification = (message, severity) => {\n    if (notification !== null && notification !== void 0 && notification.showNotification) {\n      notification.showNotification(message, severity);\n    } else {\n      console.log(`${severity}: ${message}`);\n    }\n  };\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          const decoded = jwt_decode(token);\n          if (decoded.exp * 1000 < Date.now()) {\n            localStorage.removeItem('token');\n            setUser(null);\n          } else {\n            await loadUser();\n          }\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        localStorage.removeItem('token');\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const loadUser = async () => {\n    try {\n      const response = await api.get('/auth/me');\n      setUser(response.data);\n    } catch (error) {\n      console.error('Load user error:', error);\n      localStorage.removeItem('token');\n      setUser(null);\n    }\n  };\n  const register = async userData => {\n    try {\n      const res = await api.post('/auth/register', userData);\n      if (res.data.token) {\n        localStorage.setItem('token', res.data.token);\n        setUser(res.data.user);\n        showNotification('Registration successful!', 'success');\n        return res.data;\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Registration failed';\n      showNotification(message, 'error');\n      throw new Error(message);\n    }\n  };\n  const login = async (fullName, password) => {\n    try {\n      const res = await api.post('/auth/login', {\n        fullName,\n        password\n      });\n      if (res.data.token) {\n        localStorage.setItem('token', res.data.token);\n        setUser(res.data.user);\n        showNotification('Login successful!', 'success');\n        return res.data;\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Login failed';\n      showNotification(message, 'error');\n      throw new Error(message);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    showNotification('Logged out successfully', 'success');\n  };\n  const updateProfile = async userData => {\n    try {\n      const res = await api.put('/users/profile', userData);\n      setUser(res.data);\n      showNotification('Profile updated successfully', 'success');\n      return res.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Profile update failed';\n      showNotification(message, 'error');\n      throw new Error(message);\n    }\n  };\n  const verifyEmail = async token => {\n    try {\n      const res = await api.post('/auth/verify-email', {\n        token\n      });\n      showNotification('Email verified successfully', 'success');\n      return res.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const message = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Email verification failed';\n      showNotification(message, 'error');\n      throw new Error(message);\n    }\n  };\n  const forgotPassword = async email => {\n    try {\n      await api.post('/auth/forgot-password', {\n        email\n      });\n      showNotification('Password reset email sent', 'success');\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const message = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to send reset email';\n      showNotification(message, 'error');\n      throw new Error(message);\n    }\n  };\n  const resetPassword = async (token, password) => {\n    try {\n      await api.post('/auth/reset-password', {\n        token,\n        password\n      });\n      showNotification('Password reset successful', 'success');\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      const message = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || 'Password reset failed';\n      showNotification(message, 'error');\n      throw new Error(message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      register,\n      login,\n      logout,\n      updateProfile,\n      verifyEmail,\n      forgotPassword,\n      resetPassword\n    },\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"AhUTG4qh3UbciIzO8a4Tz+tQrAU=\", false, function () {\n  return [useNotification];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useContext","useEffect","jwt_decode","api","useNotification","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","notification","showNotification","message","severity","console","log","initializeAuth","token","localStorage","getItem","decoded","exp","Date","now","removeItem","loadUser","error","response","get","data","register","userData","res","post","setItem","_error$response","_error$response$data","Error","login","fullName","password","_error$response2","_error$response2$data","logout","updateProfile","put","_error$response3","_error$response3$data","verifyEmail","_error$response4","_error$response4$data","forgotPassword","email","_error$response5","_error$response5$data","resetPassword","_error$response6","_error$response6$data","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/tuyizere dieudonne/SOCIALRISE X1/SOCIALRISE X/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useState, useContext, useEffect } from 'react';\r\nimport jwt_decode from 'jwt-decode';\r\nimport api from '../utils/api';\r\nimport { useNotification } from './NotificationContext';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const notification = useNotification();\r\n\r\n  const showNotification = (message, severity) => {\r\n    if (notification?.showNotification) {\r\n      notification.showNotification(message, severity);\r\n    } else {\r\n      console.log(`${severity}: ${message}`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          const decoded = jwt_decode(token);\r\n          if (decoded.exp * 1000 < Date.now()) {\r\n            localStorage.removeItem('token');\r\n            setUser(null);\r\n          } else {\r\n            await loadUser();\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Auth initialization error:', error);\r\n        localStorage.removeItem('token');\r\n        setUser(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const loadUser = async () => {\r\n    try {\r\n      const response = await api.get('/auth/me');\r\n      setUser(response.data);\r\n    } catch (error) {\r\n      console.error('Load user error:', error);\r\n      localStorage.removeItem('token');\r\n      setUser(null);\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const res = await api.post('/auth/register', userData);\r\n      \r\n      if (res.data.token) {\r\n        localStorage.setItem('token', res.data.token);\r\n        setUser(res.data.user);\r\n        showNotification('Registration successful!', 'success');\r\n        return res.data;\r\n      }\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Registration failed';\r\n      showNotification(message, 'error');\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  const login = async (fullName, password) => {\r\n    try {\r\n      const res = await api.post('/auth/login', { fullName, password });\r\n      \r\n      if (res.data.token) {\r\n        localStorage.setItem('token', res.data.token);\r\n        setUser(res.data.user);\r\n        showNotification('Login successful!', 'success');\r\n        return res.data;\r\n      }\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Login failed';\r\n      showNotification(message, 'error');\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n    showNotification('Logged out successfully', 'success');\r\n  };\r\n\r\n  const updateProfile = async (userData) => {\r\n    try {\r\n      const res = await api.put('/users/profile', userData);\r\n      setUser(res.data);\r\n      showNotification('Profile updated successfully', 'success');\r\n      return res.data;\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Profile update failed';\r\n      showNotification(message, 'error');\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  const verifyEmail = async (token) => {\r\n    try {\r\n      const res = await api.post('/auth/verify-email', { token });\r\n      showNotification('Email verified successfully', 'success');\r\n      return res.data;\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Email verification failed';\r\n      showNotification(message, 'error');\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      await api.post('/auth/forgot-password', { email });\r\n      showNotification('Password reset email sent', 'success');\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Failed to send reset email';\r\n      showNotification(message, 'error');\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (token, password) => {\r\n    try {\r\n      await api.post('/auth/reset-password', { token, password });\r\n      showNotification('Password reset successful', 'success');\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Password reset failed';\r\n      showNotification(message, 'error');\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        loading,\r\n        register,\r\n        login,\r\n        logout,\r\n        updateProfile,\r\n        verifyEmail,\r\n        forgotPassword,\r\n        resetPassword\r\n      }}\r\n    >\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}