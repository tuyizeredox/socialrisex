{"ast":null,"code":"import api from './api';\nexport const createWithdrawal = async withdrawalData => {\n  const response = await api.post('/withdrawals', withdrawalData);\n  return response.data;\n};\nexport const getUserWithdrawals = async () => {\n  try {\n    var _response$data;\n    const response = await api.get('/withdrawals');\n    if (!((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success)) {\n      var _response$data2;\n      throw new Error(((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.message) || 'Failed to fetch withdrawals');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user withdrawals:', error);\n    throw error;\n  }\n};\nexport const getAllWithdrawals = async () => {\n  try {\n    var _response$data3;\n    const response = await api.get('/admin/withdrawals');\n    if (!((_response$data3 = response.data) !== null && _response$data3 !== void 0 && _response$data3.success)) {\n      var _response$data4;\n      throw new Error(((_response$data4 = response.data) === null || _response$data4 === void 0 ? void 0 : _response$data4.message) || 'Failed to fetch withdrawals');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching all withdrawals:', error);\n    throw error;\n  }\n};\nexport const getPendingWithdrawals = async () => {\n  try {\n    var _response$data5;\n    const response = await api.get('/admin/withdrawals/pending');\n    if (!((_response$data5 = response.data) !== null && _response$data5 !== void 0 && _response$data5.success)) {\n      var _response$data6;\n      throw new Error(((_response$data6 = response.data) === null || _response$data6 === void 0 ? void 0 : _response$data6.message) || 'Failed to fetch withdrawals');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching pending withdrawals:', error);\n    throw error;\n  }\n};\nexport const processWithdrawal = async (id, data) => {\n  const response = await api.put(`/admin/withdrawals/${id}`, data);\n  return response.data;\n};","map":{"version":3,"names":["api","createWithdrawal","withdrawalData","response","post","data","getUserWithdrawals","_response$data","get","success","_response$data2","Error","message","error","console","getAllWithdrawals","_response$data3","_response$data4","getPendingWithdrawals","_response$data5","_response$data6","processWithdrawal","id","put"],"sources":["C:/Users/tuyizere dieudonne/SOCIALRISE X1/SOCIALRISE X/frontend/src/services/withdrawal.service.js"],"sourcesContent":["import api from './api';\n\nexport const createWithdrawal = async (withdrawalData) => {\n  const response = await api.post('/withdrawals', withdrawalData);\n  return response.data;\n};\n\nexport const getUserWithdrawals = async () => {\n  try {\n    const response = await api.get('/withdrawals');\n    if (!response.data?.success) {\n      throw new Error(response.data?.message || 'Failed to fetch withdrawals');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user withdrawals:', error);\n    throw error;\n  }\n};\n\nexport const getAllWithdrawals = async () => {\n  try {\n    const response = await api.get('/admin/withdrawals');\n    if (!response.data?.success) {\n      throw new Error(response.data?.message || 'Failed to fetch withdrawals');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching all withdrawals:', error);\n    throw error;\n  }\n};\n\nexport const getPendingWithdrawals = async () => {\n  try {\n    const response = await api.get('/admin/withdrawals/pending');\n    if (!response.data?.success) {\n      throw new Error(response.data?.message || 'Failed to fetch withdrawals');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching pending withdrawals:', error);\n    throw error;\n  }\n};\n\nexport const processWithdrawal = async (id, data) => {\n  const response = await api.put(`/admin/withdrawals/${id}`, data);\n  return response.data;\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,cAAc,IAAK;EACxD,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,cAAc,EAAEF,cAAc,CAAC;EAC/D,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IAAA,IAAAC,cAAA;IACF,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACQ,GAAG,CAAC,cAAc,CAAC;IAC9C,IAAI,GAAAD,cAAA,GAACJ,QAAQ,CAACE,IAAI,cAAAE,cAAA,eAAbA,cAAA,CAAeE,OAAO,GAAE;MAAA,IAAAC,eAAA;MAC3B,MAAM,IAAIC,KAAK,CAAC,EAAAD,eAAA,GAAAP,QAAQ,CAACE,IAAI,cAAAK,eAAA,uBAAbA,eAAA,CAAeE,OAAO,KAAI,6BAA6B,CAAC;IAC1E;IACA,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IAAA,IAAAC,eAAA;IACF,MAAMb,QAAQ,GAAG,MAAMH,GAAG,CAACQ,GAAG,CAAC,oBAAoB,CAAC;IACpD,IAAI,GAAAQ,eAAA,GAACb,QAAQ,CAACE,IAAI,cAAAW,eAAA,eAAbA,eAAA,CAAeP,OAAO,GAAE;MAAA,IAAAQ,eAAA;MAC3B,MAAM,IAAIN,KAAK,CAAC,EAAAM,eAAA,GAAAd,QAAQ,CAACE,IAAI,cAAAY,eAAA,uBAAbA,eAAA,CAAeL,OAAO,KAAI,6BAA6B,CAAC;IAC1E;IACA,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMK,qBAAqB,GAAG,MAAAA,CAAA,KAAY;EAC/C,IAAI;IAAA,IAAAC,eAAA;IACF,MAAMhB,QAAQ,GAAG,MAAMH,GAAG,CAACQ,GAAG,CAAC,4BAA4B,CAAC;IAC5D,IAAI,GAAAW,eAAA,GAAChB,QAAQ,CAACE,IAAI,cAAAc,eAAA,eAAbA,eAAA,CAAeV,OAAO,GAAE;MAAA,IAAAW,eAAA;MAC3B,MAAM,IAAIT,KAAK,CAAC,EAAAS,eAAA,GAAAjB,QAAQ,CAACE,IAAI,cAAAe,eAAA,uBAAbA,eAAA,CAAeR,OAAO,KAAI,6BAA6B,CAAC;IAC1E;IACA,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMQ,iBAAiB,GAAG,MAAAA,CAAOC,EAAE,EAAEjB,IAAI,KAAK;EACnD,MAAMF,QAAQ,GAAG,MAAMH,GAAG,CAACuB,GAAG,CAAC,sBAAsBD,EAAE,EAAE,EAAEjB,IAAI,CAAC;EAChE,OAAOF,QAAQ,CAACE,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}