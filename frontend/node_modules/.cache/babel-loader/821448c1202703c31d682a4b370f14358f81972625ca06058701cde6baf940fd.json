{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tuyizere dieudonne\\\\SOCIALRISE X1\\\\SOCIALRISE X\\\\frontend\\\\src\\\\context\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useMemo } from 'react';\nimport { getTheme } from '../theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport function ThemeProvider({\n  children\n}) {\n  _s();\n  const [mode, setMode] = useState('light');\n  const toggleTheme = () => {\n    setMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n  };\n  const theme = useMemo(() => getTheme(mode), [mode]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      mode,\n      toggleTheme,\n      theme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_s(ThemeProvider, \"u8zjN1kWJUDh6oH/uPWW9KokeTA=\");\n_c = ThemeProvider;\nexport function useTheme() {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useMemo","getTheme","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","mode","setMode","toggleTheme","prevMode","theme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/tuyizere dieudonne/SOCIALRISE X1/SOCIALRISE X/frontend/src/context/ThemeContext.js"],"sourcesContent":["import { createContext, useContext, useState, useMemo } from 'react';\nimport { getTheme } from '../theme';\n\nconst ThemeContext = createContext();\n\nexport function ThemeProvider({ children }) {\n  const [mode, setMode] = useState('light');\n\n  const toggleTheme = () => {\n    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n  };\n\n  const theme = useMemo(() => getTheme(mode), [mode]);\n\n  return (\n    <ThemeContext.Provider value={{ mode, toggleTheme, theme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AACpE,SAASC,QAAQ,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,gBAAGP,aAAa,CAAC,CAAC;AAEpC,OAAO,SAASQ,aAAaA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,OAAO,CAAC;EAEzC,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACxBD,OAAO,CAAEE,QAAQ,IAAMA,QAAQ,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EAClE,CAAC;EAED,MAAMC,KAAK,GAAGZ,OAAO,CAAC,MAAMC,QAAQ,CAACO,IAAI,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEnD,oBACEL,OAAA,CAACC,YAAY,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEN,IAAI;MAAEE,WAAW;MAAEE;IAAM,CAAE;IAAAN,QAAA,EACxDA;EAAQ;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B;AAACX,EAAA,CAdeF,aAAa;AAAAc,EAAA,GAAbd,aAAa;AAgB7B,OAAO,SAASe,QAAQA,CAAA,EAAG;EAAAC,GAAA;EACzB,MAAMC,OAAO,GAAGxB,UAAU,CAACM,YAAY,CAAC;EACxC,IAAI,CAACkB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB;AAACD,GAAA,CANeD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}